// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_discovery.proto

#ifndef PROTOBUF_service_5fdiscovery_2eproto__INCLUDED
#define PROTOBUF_service_5fdiscovery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_service_5fdiscovery_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceInfoImpl();
void InitDefaultsServiceInfo();
void InitDefaultsServiceDiscoveryImpl();
void InitDefaultsServiceDiscovery();
inline void InitDefaults() {
  InitDefaultsServiceInfo();
  InitDefaultsServiceDiscovery();
}
}  // namespace protobuf_service_5fdiscovery_2eproto
namespace smw {
namespace core {
namespace proto {
class ServiceDiscovery;
class ServiceDiscoveryDefaultTypeInternal;
extern ServiceDiscoveryDefaultTypeInternal _ServiceDiscovery_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
}  // namespace proto
}  // namespace core
}  // namespace smw
namespace smw {
namespace core {
namespace proto {

enum ServiceDiscovery_ServiceDiscoveryOperation {
  ServiceDiscovery_ServiceDiscoveryOperation_OFFER = 0,
  ServiceDiscovery_ServiceDiscoveryOperation_STOP_OFFER = 1,
  ServiceDiscovery_ServiceDiscoveryOperation_FIND = 2,
  ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND = 3,
  ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscovery_ServiceDiscoveryOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscovery_ServiceDiscoveryOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceDiscovery_ServiceDiscoveryOperation_IsValid(int value);
const ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MIN = ServiceDiscovery_ServiceDiscoveryOperation_OFFER;
const ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX = ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND;
const int ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_ARRAYSIZE = ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
inline const ::std::string& ServiceDiscovery_ServiceDiscoveryOperation_Name(ServiceDiscovery_ServiceDiscoveryOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceDiscovery_ServiceDiscoveryOperation_descriptor(), value);
}
inline bool ServiceDiscovery_ServiceDiscoveryOperation_Parse(
    const ::std::string& name, ServiceDiscovery_ServiceDiscoveryOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceDiscovery_ServiceDiscoveryOperation>(
    ServiceDiscovery_ServiceDiscoveryOperation_descriptor(), name, value);
}
// ===================================================================

class ServiceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:smw.core.proto.ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServiceInfo* other);
  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_id = 4;
  void clear_host_id();
  static const int kHostIdFieldNumber = 4;
  const ::std::string& host_id() const;
  void set_host_id(const ::std::string& value);
  #if LANG_CXX11
  void set_host_id(::std::string&& value);
  #endif
  void set_host_id(const char* value);
  void set_host_id(const char* value, size_t size);
  ::std::string* mutable_host_id();
  ::std::string* release_host_id();
  void set_allocated_host_id(::std::string* host_id);

  // string process_id = 5;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 5;
  const ::std::string& process_id() const;
  void set_process_id(const ::std::string& value);
  #if LANG_CXX11
  void set_process_id(::std::string&& value);
  #endif
  void set_process_id(const char* value);
  void set_process_id(const char* value, size_t size);
  ::std::string* mutable_process_id();
  ::std::string* release_process_id();
  void set_allocated_process_id(::std::string* process_id);

  // uint32 service_id = 1;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::uint32 service_id() const;
  void set_service_id(::google::protobuf::uint32 value);

  // uint32 instance_id = 2;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  ::google::protobuf::uint32 instance_id() const;
  void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:smw.core.proto.ServiceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_id_;
  ::google::protobuf::internal::ArenaStringPtr process_id_;
  ::google::protobuf::uint32 service_id_;
  ::google::protobuf::uint32 instance_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_5fdiscovery_2eproto::TableStruct;
  friend void ::protobuf_service_5fdiscovery_2eproto::InitDefaultsServiceInfoImpl();
};
// -------------------------------------------------------------------

class ServiceDiscovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:smw.core.proto.ServiceDiscovery) */ {
 public:
  ServiceDiscovery();
  virtual ~ServiceDiscovery();

  ServiceDiscovery(const ServiceDiscovery& from);

  inline ServiceDiscovery& operator=(const ServiceDiscovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceDiscovery(ServiceDiscovery&& from) noexcept
    : ServiceDiscovery() {
    *this = ::std::move(from);
  }

  inline ServiceDiscovery& operator=(ServiceDiscovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceDiscovery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDiscovery* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscovery*>(
               &_ServiceDiscovery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServiceDiscovery* other);
  friend void swap(ServiceDiscovery& a, ServiceDiscovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscovery* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceDiscovery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceDiscovery& from);
  void MergeFrom(const ServiceDiscovery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceDiscovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscoveryOperation;
  static const ServiceDiscoveryOperation OFFER =
    ServiceDiscovery_ServiceDiscoveryOperation_OFFER;
  static const ServiceDiscoveryOperation STOP_OFFER =
    ServiceDiscovery_ServiceDiscoveryOperation_STOP_OFFER;
  static const ServiceDiscoveryOperation FIND =
    ServiceDiscovery_ServiceDiscoveryOperation_FIND;
  static const ServiceDiscoveryOperation STOP_FIND =
    ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND;
  static inline bool ServiceDiscoveryOperation_IsValid(int value) {
    return ServiceDiscovery_ServiceDiscoveryOperation_IsValid(value);
  }
  static const ServiceDiscoveryOperation ServiceDiscoveryOperation_MIN =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MIN;
  static const ServiceDiscoveryOperation ServiceDiscoveryOperation_MAX =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX;
  static const int ServiceDiscoveryOperation_ARRAYSIZE =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServiceDiscoveryOperation_descriptor() {
    return ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
  }
  static inline const ::std::string& ServiceDiscoveryOperation_Name(ServiceDiscoveryOperation value) {
    return ServiceDiscovery_ServiceDiscoveryOperation_Name(value);
  }
  static inline bool ServiceDiscoveryOperation_Parse(const ::std::string& name,
      ServiceDiscoveryOperation* value) {
    return ServiceDiscovery_ServiceDiscoveryOperation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .smw.core.proto.ServiceInfo service_info = 2;
  bool has_service_info() const;
  void clear_service_info();
  static const int kServiceInfoFieldNumber = 2;
  const ::smw::core::proto::ServiceInfo& service_info() const;
  ::smw::core::proto::ServiceInfo* release_service_info();
  ::smw::core::proto::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::smw::core::proto::ServiceInfo* service_info);

  // .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation operation() const;
  void set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value);

  // @@protoc_insertion_point(class_scope:smw.core.proto.ServiceDiscovery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::smw::core::proto::ServiceInfo* service_info_;
  int operation_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_5fdiscovery_2eproto::TableStruct;
  friend void ::protobuf_service_5fdiscovery_2eproto::InitDefaultsServiceDiscoveryImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInfo

// uint32 service_id = 1;
inline void ServiceInfo::clear_service_id() {
  service_id_ = 0u;
}
inline ::google::protobuf::uint32 ServiceInfo::service_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.service_id)
  return service_id_;
}
inline void ServiceInfo::set_service_id(::google::protobuf::uint32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.service_id)
}

// uint32 instance_id = 2;
inline void ServiceInfo::clear_instance_id() {
  instance_id_ = 0u;
}
inline ::google::protobuf::uint32 ServiceInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.instance_id)
  return instance_id_;
}
inline void ServiceInfo::set_instance_id(::google::protobuf::uint32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.instance_id)
}

// string host_id = 4;
inline void ServiceInfo::clear_host_id() {
  host_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::host_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.host_id)
  return host_id_.GetNoArena();
}
inline void ServiceInfo::set_host_id(const ::std::string& value) {
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.host_id)
}
#if LANG_CXX11
inline void ServiceInfo::set_host_id(::std::string&& value) {
  
  host_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smw.core.proto.ServiceInfo.host_id)
}
#endif
inline void ServiceInfo::set_host_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smw.core.proto.ServiceInfo.host_id)
}
inline void ServiceInfo::set_host_id(const char* value, size_t size) {
  
  host_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smw.core.proto.ServiceInfo.host_id)
}
inline ::std::string* ServiceInfo::mutable_host_id() {
  
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceInfo.host_id)
  return host_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_host_id() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceInfo.host_id)
  
  return host_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_host_id(::std::string* host_id) {
  if (host_id != NULL) {
    
  } else {
    
  }
  host_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_id);
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceInfo.host_id)
}

// string process_id = 5;
inline void ServiceInfo::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::process_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.process_id)
  return process_id_.GetNoArena();
}
inline void ServiceInfo::set_process_id(const ::std::string& value) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.process_id)
}
#if LANG_CXX11
inline void ServiceInfo::set_process_id(::std::string&& value) {
  
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smw.core.proto.ServiceInfo.process_id)
}
#endif
inline void ServiceInfo::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smw.core.proto.ServiceInfo.process_id)
}
inline void ServiceInfo::set_process_id(const char* value, size_t size) {
  
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smw.core.proto.ServiceInfo.process_id)
}
inline ::std::string* ServiceInfo::mutable_process_id() {
  
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceInfo.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_process_id() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceInfo.process_id)
  
  return process_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    
  } else {
    
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceInfo.process_id)
}

// -------------------------------------------------------------------

// ServiceDiscovery

// .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
inline void ServiceDiscovery::clear_operation() {
  operation_ = 0;
}
inline ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::operation() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceDiscovery.operation)
  return static_cast< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation >(operation_);
}
inline void ServiceDiscovery::set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceDiscovery.operation)
}

// .smw.core.proto.ServiceInfo service_info = 2;
inline bool ServiceDiscovery::has_service_info() const {
  return this != internal_default_instance() && service_info_ != NULL;
}
inline void ServiceDiscovery::clear_service_info() {
  if (GetArenaNoVirtual() == NULL && service_info_ != NULL) {
    delete service_info_;
  }
  service_info_ = NULL;
}
inline const ::smw::core::proto::ServiceInfo& ServiceDiscovery::service_info() const {
  const ::smw::core::proto::ServiceInfo* p = service_info_;
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceDiscovery.service_info)
  return p != NULL ? *p : *reinterpret_cast<const ::smw::core::proto::ServiceInfo*>(
      &::smw::core::proto::_ServiceInfo_default_instance_);
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::release_service_info() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceDiscovery.service_info)
  
  ::smw::core::proto::ServiceInfo* temp = service_info_;
  service_info_ = NULL;
  return temp;
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::mutable_service_info() {
  
  if (service_info_ == NULL) {
    service_info_ = new ::smw::core::proto::ServiceInfo;
  }
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceDiscovery.service_info)
  return service_info_;
}
inline void ServiceDiscovery::set_allocated_service_info(::smw::core::proto::ServiceInfo* service_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_info_;
  }
  if (service_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceDiscovery.service_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace core
}  // namespace smw

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation>() {
  return ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fdiscovery_2eproto__INCLUDED
